""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""" General  """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

filetype plugin indent on
set nocompatible
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""" vim-plug  """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Install vim-plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" vim-plug plugins. Run :PlugInstall to download them.
call plug#begin('~/.vim/plugged')
" vim-surround: all about surroundings: brackets, quotes, etc.
Plug 'tpope/vim-surround'
Plug 'itchyny/lightline.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'SirVer/ultisnips'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'
Plug 'dense-analysis/ale'
Plug 'airblade/vim-gitgutter'
" Goyo: distraction free writing
Plug 'junegunn/goyo.vim'
" Vim-Jinja2-Syntax: Jinja2 sytnax highlighting
Plug 'Glench/Vim-Jinja2-Syntax'
" vim-pandoc: Pandoc integration
Plug 'vim-pandoc/vim-pandoc'
" vim-pandoc-syntax: Pandoc markdown syntax
Plug 'vim-pandoc/vim-pandoc-syntax'
call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""" User interface  """""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ignore case when searching
set ignorecase 

" When searching, try to be smart about cases
set smartcase 

" Highlight search results
set hlsearch 

" Makes search act like search in modern browsers
set incsearch 

" Show matching brackets when text indicator is over them
set showmatch

" Show line numbers
set number

" Set utf8 as standard encoding
set encoding=utf8 

" Set a margin at 80 characters
set colorcolumn=80

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""" Text, tab, indent """"""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Copy the identation of the previous line
set autoindent

" Insert one extra level of indentation in some cases
set smartindent

" Insert linebreak at 79 characters
set textwidth=79
let g:pandoc#formatting#textwidth=79
let g:pandoc#formatting#mode = "h"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""" Color and fonts " """"""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Syntax highlighting
syntax enable
set termguicolors
set background=dark
colorscheme solarized8

" Set utf8 as standard encoding
set encoding=utf8 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""" Status line """""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Lightline configuration
let g:lightline = {'colorscheme': 'solarized',}
"
" Use lightline instead of the default vim message
set noshowmode 

" Always show the status line
set laststatus=2 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""" UltiSnips """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""" vim-pandoc """"""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable folding
let g:pandoc#modules#disabled = ["folding"]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""" ALE """""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set ALE C++ options
let g:ale_cpp_gcc_options = '-Werror -Wall -Weffc++ -Wextra -Wsign-conversion -pedantic-errors -std=c++17'
let g:ale_linters = {'c': ['gcc'], 'cpp': ['g++'], 'python': ['flake8', 'pylint']}
